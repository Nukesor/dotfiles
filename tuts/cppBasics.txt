Declaration Parameter:

const:

    Variable:   const int Value
                    - creates a constant value that can't be changed
        
    Pointer:    const int * Constant
                int const * Constant
                    - both declare a Pointer to a constant int

                int * const Constant
                    - declares a constant pointer to an int
                const int * const Constant
                    - declares a constant pointer to a constant int

    Functions: const void funktionName(){};
                    - creates a class whose internal values aren't changable


    Function Parameters:

        void change(int Parameter) {Parameter = 54};
            - This doesn't change the original Parameter, because the given Parameter is just a Copy of the original object.

        void change(int &Parameter) {Parameter = 54};
            - This does actually work. The & operator passes the original object instead of a copy.

        void change(int const &Parameter) {Parameter = 54}
            - Doesn't work again
            - This is used if the copying of the object would take too much memory or take too long. The object is passed directly but modified with a const. Therefore it values can be read but the object can't be modified.
        void change() const;
            - This is used if the function is a member of some kind. The const prevents the changing of other members of the same structure.
        void change(int *Parameter)
            - Parameter has to be dereferenced before the original value can be manipulated. (*Parameter)++


    Function return value

        int*const Method3(int*const&);
            - The returned pointer is not alterable
            - The given pointer isn't alterable
            - The int that is pointed by the given pointer is not alterable


virtual:
    
    Function : virtual function();
                    - If a virtual function is overridden in a derived class the function of the derived class is called, if the function is called with a pointer of the base class.



Constructor:
        
    Copy Constructor:
        This is a special kind of constructor which is used for creating new instances while copying already existing instances. 
        Here are some valid expressions for copy constructors.
    
        MyClass( const MyClass& other );
        MyClass( MyClass& other );
        MyClass( volatile const MyClass& other );
        MyClass( volatile MyClass& other );


      
    Superclass:
        Typically a normal inheritance looks like this:

                class SuperClass
                {
                    public:
                        SuperClass(int foo)
                            {
                               // do something with foo
                            }
                };

                class SubClass : public SuperClass
                {
                public:

                    SubClass(int foo, int bar)
                    : SuperClass(foo)    // Call the superclass constructor in the subclass' initialization list.
                        {
                            // do something with bar
                        }
                };
