#!/bin/env python3

import os
import sys
import argparse


def main():
    # Specifying commands
    parser = argparse.ArgumentParser(description='Symove. Moving while leaving a symlink')
    parser.add_argument('paths', type=str, nargs='*', help='The paths. Same behaviour as cp.')

    args = vars(parser.parse_args())

    if 'paths' in args and len(args['paths']) >= 2:
        target = args['paths'][-1]
        to_copy = args['paths'][:-1]
        is_dir = os.path.isdir(target)
        exists = os.path.exists(target)

        # Check if paths to copy exists
        for path in to_copy:
            if not os.path.exists(path):
                print('Path not existing: {}'.format(path))
                sys.exit(1)
            if os.path.islink(path):
                print('File is a symlink aborting: {}'.format(path))
                sys.exit(1)

        if not is_dir and len(to_copy) > 1:
            print('Please specify a directory if you want to move more than one file')
        elif exists and is_dir:
            for path in to_copy:
                if not os.path.exists(path):
                    print('Path not existing: {}'.format(path))
                    sys.exit(1)
            for path in to_copy:
                basename = os.path.basename(path)
                target_path = os.path.join(target, basename)
                os.rename(path, target_path)
                os.symlink(target_path, path)
                print('Copied {} to {} and created backward symlink'.format(path, target_path))

        elif not exists and len(to_copy) == 1:
            path = to_copy[0]
            basename = os.path.basename(path)
            target_path = os.path.join(target, basename)
            os.rename(path, target_path)
            os.symlink(target_path, path)

        else:
            print('Dafuq? to_copy: {}, is_dir: {}, exists: {}'.format(to_copy, is_dir, exists))
            sys.exit(1)

    else:
        print('At least two files/directories need to be specified')
        sys.exit(1)

    sys.exit(0)

if __name__ == "__main__":
    main()
